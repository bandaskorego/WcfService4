//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceClient.ServiceReference2 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference2.IOperation2")]
    public interface IOperation2 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation2/multiplay", ReplyAction="http://tempuri.org/IOperation2/multiplayResponse")]
        string multiplay(string str, int a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation2/multiplay", ReplyAction="http://tempuri.org/IOperation2/multiplayResponse")]
        System.Threading.Tasks.Task<string> multiplayAsync(string str, int a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation2/reverse", ReplyAction="http://tempuri.org/IOperation2/reverseResponse")]
        string reverse(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation2/reverse", ReplyAction="http://tempuri.org/IOperation2/reverseResponse")]
        System.Threading.Tasks.Task<string> reverseAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation2/concat", ReplyAction="http://tempuri.org/IOperation2/concatResponse")]
        string concat(string str1, string str2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOperation2/concat", ReplyAction="http://tempuri.org/IOperation2/concatResponse")]
        System.Threading.Tasks.Task<string> concatAsync(string str1, string str2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOperation2Channel : WcfServiceClient.ServiceReference2.IOperation2, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Operation2Client : System.ServiceModel.ClientBase<WcfServiceClient.ServiceReference2.IOperation2>, WcfServiceClient.ServiceReference2.IOperation2 {
        
        public Operation2Client() {
        }
        
        public Operation2Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Operation2Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Operation2Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Operation2Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string multiplay(string str, int a) {
            return base.Channel.multiplay(str, a);
        }
        
        public System.Threading.Tasks.Task<string> multiplayAsync(string str, int a) {
            return base.Channel.multiplayAsync(str, a);
        }
        
        public string reverse(string str) {
            return base.Channel.reverse(str);
        }
        
        public System.Threading.Tasks.Task<string> reverseAsync(string str) {
            return base.Channel.reverseAsync(str);
        }
        
        public string concat(string str1, string str2) {
            return base.Channel.concat(str1, str2);
        }
        
        public System.Threading.Tasks.Task<string> concatAsync(string str1, string str2) {
            return base.Channel.concatAsync(str1, str2);
        }
    }
}
